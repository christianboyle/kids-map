# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- For Docker Compose production builds: Use `docker compose --profile prod up --build` (without hyphen) instead of `docker-compose` for newer versions. Also fix any TypeScript compilation errors (unused variables) before building.
- **React Leaflet MarkerCluster Color Override:** When using react-leaflet-markercluster, the default styles import adds predefined colors (.marker-cluster-small, .marker-cluster-medium, .marker-cluster-large with green/yellow/red backgrounds). These override custom SVG icons. To fix: Add CSS overrides to make the cluster div backgrounds transparent: `.marker-cluster-small div, .marker-cluster-medium div, .marker-cluster-large div { background: none !important; background-color: transparent !important; }`

# Scratchpad

## Current Task: KC Kids Map - Kid-Friendly Maps App

### Task Overview
Recreate the SF Kids Map (https://kid-friendly-maps.replit.app/) as a KC Kids Map focusing on Kansas City instead of San Francisco.

### Technical Requirements
- Vite React App
- Docker Compose setup
- Separate dev and prod scripts
- OpenStreetMap for data
- Leaflet.js for maps with Carto Light theme
- Kansas City as the target location

### Features to Implement (Phase 1 - Initial Setup)
[X] Project setup (Vite + React + TypeScript)
[X] Install Leaflet dependencies
[X] Docker Compose configuration
[X] Basic layout: sidebar + map view
[X] Leaflet map integration with Carto Light theme
[X] Activity category filters (Playgrounds, Parks, Museums, Galleries, Science Centers, Planetariums)
[X] Search functionality (UI implemented)
[X] Map markers with different colors for activity types
[X] "About This Map" section
[X] Data attribution footer

### Features for Later (Phase 2)
- SSO/Authentication
- Favorite saving functionality
- User accounts

### UI/UX Design Notes from Target Site
- Clean sidebar layout on the left
- Toggle switches for activity categories (blue when enabled)
- Search input field
- Map takes up majority of screen space
- Light, kid-friendly color scheme
- Zoom controls on map
- Different colored markers for different activity types

### Tech Stack Decisions
- Frontend: Vite + React + TypeScript
- Maps: Leaflet.js + Carto Light tiles
- Data: OpenStreetMap via Overpass API
- Styling: CSS Modules or Styled Components
- Container: Docker + Docker Compose
- Location: Kansas City, MO coordinates

### Recent Fixes Applied
- Fixed toggle switches to match original design (CSS-based switches vs checkboxes)
- Fixed map marker emoji rendering using proper SVG encoding
- Resolved DOMException error with custom icons
- Implemented static places.json system for faster loading
- Added data quality filtering (removes bad names, coordinates, duplicates)
- Fixed duplicate React key errors with unique key generation
- Added deduplication logic for places within 100m of each other
- Fixed production Docker build: Removed unused `allEnabled` variable from Sidebar.tsx to resolve TypeScript compilation error

### Project Status: IMPLEMENTING CLUSTERING ‚ö°
[X] KC Kids Map fully functional with production build working
[X] All major features implemented and working
[X] Docker development and production environments ready
[X] Mobile responsiveness: Sidebar hidden on mobile devices (screens ‚â§768px)
[X] Geolocation control implementation:
    - Location button in top right corner (üìç icon)
    - Browser geolocation API integration
    - Map centers on user location (zoom level 15)
    - User location marker with blue dot design
    - Error handling for permissions and geolocation failures
    - Mobile responsive design

## NEW TASK: Zoom-based Clustering Implementation

### Problem Identified
- Currently limiting to 50 items per category in both:
  - `src/services/overpassApi.ts` line 116: `.slice(0, 50)`
  - `scripts/generatePlaces.js` line 169: `.slice(0, 50)`
- Total dataset contains ~255 places (confirmed via `ag -c "id" src/places.json`)
- Missing valid results that users want to see
- Map becomes overwhelming with too many markers at wide zoom levels

### Goal
Implement zoom-based clustering similar to the weather outage map examples:
- Consolidate nearby markers into clusters with counts at low zoom levels
- Expand to individual markers as user zooms in
- Show total count in clusters
- Maintain performance with larger dataset

### Implementation Plan
[X] Phase 1: Remove 50-item limits
  [X] Remove `.slice(0, 50)` from overpassApi.ts  
  [X] Remove `.slice(0, 50)` from generatePlaces.js
  [X] Regenerate places.json with full dataset
  [X] Test performance impact
  
### Phase 1 Results:
- **Dataset expanded from 255 to 1,596 places** (6x increase!)
- **Breakdown by category:**
  - Parks: 312 places
  - Museums: 312 places  
  - Galleries: 309 places
  - Playgrounds: 297 places
  - Science Centers: 296 places
  - Planetariums: 0 places
- **Performance impact:** Need to implement clustering due to marker density
  
[X] Phase 2: Research clustering libraries
  [X] Evaluate React Leaflet clustering options (react-leaflet-markercluster)
  [X] Look into Leaflet.markercluster plugin
  [X] Test clustering behavior with our data
  
[X] Phase 3: Implement clustering
  [X] Install and configure clustering library
  [X] Integrate with existing MapView component
  [X] Style clusters to match app design
  [X] Test cluster expand/collapse behavior
  
### Phase 3 Results:
- **‚úÖ Installed react-leaflet-markercluster@5.0.0-rc.0** + leaflet.markercluster
- **‚úÖ Added clustering styles** to index.css
- **‚úÖ Custom cluster icons** with neutral design:
  - All clusters: Dark gray (#404040) - doesn't conflict with activity colors
  - Small clusters (<10): 30px, 70% opacity
  - Medium clusters (10-99): 35px, 80% opacity
  - Large clusters (100+): 40px, 90% opacity
- **‚úÖ Cluster configuration**:
  - zoomToBoundsOnClick: true (expand on click)
  - spiderfyOnMaxZoom: true (spread markers when needed)
  - animate: true (smooth transitions)
  - maxClusterRadius: 80px
- **‚úÖ All 1,596 places** now show with intelligent clustering

[X] Phase 4: Comprehensive Improvements
  [X] Enhanced visual design with gradients and shadows
  [X] Fixed clustering logic and marker validation
  [X] Optimized clustering parameters and behavior
  [X] Added professional CSS styling with hover effects
  
### Phase 4 Results:
- **‚úÖ Enhanced cluster icons** with gradient backgrounds and drop shadows
- **‚úÖ Dynamic clustering radius** based on zoom level (120px‚Üí80px‚Üí40px)
- **‚úÖ Fixed marker validation** to prevent invalid coordinates from breaking clusters
- **‚úÖ Professional CSS styling** with hover animations and smooth transitions
- **‚úÖ Improved popup design** with better formatting and activity colors
- **‚úÖ Better clustering behavior**:
  - Disables clustering at zoom level 18 (street level)
  - Chunked loading for better performance
  - Enhanced spiderfy distance for less overlap
  - Dynamic radius prevents lonely markers
